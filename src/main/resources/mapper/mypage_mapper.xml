<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="com.erunjrun.mypage.dao.MypageDAO">

	<select id="findSessionId" parameterType="String"
		resultType="com.erunjrun.member.dto.MemberDTO">
		SELECT
		member.id,
		member.nickname,
		member.email,
		member.pw,
		member.profile_use,
		profile.image AS
		image,
		member.icon_image
		FROM
		member
		LEFT JOIN
		profile ON
		member.id =
		profile.id
		WHERE
		member.id = #{id} LIMIT
		1;

	</select>

	<select id="profileDetail"
		resultType="com.erunjrun.member.dto.MemberDTO">
		SELECT
		id,
		nickname,
		point,
		phone,
		address,
		pw,
		email,
		birth,
		gender
		FROM
		member
		WHERE
		id = #{id}
	</select>

	<select id="ProfileImage" parameterType="String"
		resultType="com.erunjrun.member.dto.ProfileDTO">
		SELECT
		id,
		image
		FROM
		profile
		WHERE
		id = #{id} LIMIT 1;
	</select>

	<update id="profileUpdate" parameterType="map">
		UPDATE member
		<set>
			<if test="pw != null">pw = #{pw},</if>
			<if test="nickname != null">nickname = #{nickname},</if>
			<if test="address != null">address = #{address},</if>
			<if test="phone != null">phone = #{phone}</if>
		</set>
		WHERE id = #{id}
	</update>

	<update id="updateProfileImage" parameterType="map">
		UPDATE profile
		SET
		image = #{image}
		WHERE id = (SELECT id FROM member WHERE id = #{id});
	</update>

	<update id="setUseY" parameterType="String">
		UPDATE member SET use_yn =
		'Y' WHERE id = #{id}
	</update>

	<update id="updateProfile_use" parameterType="map">
		UPDATE member
		SET
		profile_use = 'Y' WHERE id = #{id}
	</update>

	<insert id="firstExerciseProfile" parameterType="map">
		INSERT INTO
		profile (
		id,
		image,
		content,
		exercise_min,
		exercise_dis,
		exercise,
		mate,
		latitude,
		longitude,
		sido,
		dong,
		detail_address,
		shortsido
		)
		VALUES (
		#{id},
		#{image},
		#{content},
		#{exercise_min},
		#{exercise_dis},
		#{exercise},
		#{mate},
		#{latitude},
		#{longitude},
		#{sido},
		#{dong},
		#{detail_address},
		#{shortsido}
		);
	</insert>


	<select id="mypageDetail" parameterType="String"
		resultType="com.erunjrun.mypage.dto.MypageDTO">
		SELECT
		id,
		content,
		exercise_min,
		exercise_dis,
		exercise,
		mate,
		latitude,
		longitude,
		sido,
		dong,
		detail_address,
		shortsido,
		profile_use,
		exercise_use
		FROM profile
		WHERE id = #{id} LIMIT 1;
	</select>

	<update id="updateProfileVisibility" parameterType="map">
		UPDATE
		profile
		SET
		profile_use = #{profileVisibility}
		WHERE id = #{id}
	</update>

	<update id="updateMateSearch" parameterType="map">
		UPDATE profile
		SET
		exercise_use = #{mateSearch}
		WHERE id = #{id}
	</update>

	<update id="ExerciseProfileUpdate" parameterType="map">
		UPDATE profile
		JOIN member ON member.id = profile.id
		SET
		<if test="nickname != null">
			member.nickname = #{nickname},
		</if>
		<if test="content != null">
			profile.content = #{content},
		</if>
		<if test="exercise_min != null">
			profile.exercise_min = #{exercise_min},
		</if>
		<if test="exercise_dis != null">
			profile.exercise_dis = #{exercise_dis},
		</if>
		<if test="exercise != null">
			profile.exercise = #{exercise},
		</if>
		<if test="mate != null">
			profile.mate = #{mate},
		</if>
		<if test="latitude != null">
			profile.latitude = #{latitude},
		</if>
		<if test="longitude != null">
			profile.longitude = #{longitude},
		</if>
		<if test="sido != null">
			profile.sido = #{sido},
		</if>
		<if test="dong != null">
			profile.dong = #{dong},
		</if>
		<if test="detail_address != null">
			profile.detail_address = #{detail_address},
		</if>
		<if test="shortsido != null">
			profile.shortsido = #{shortsido}
		</if>
		WHERE profile.id = #{id}
	</update>

	<insert id="addPoint" parameterType="map">
		INSERT INTO member_point
		(id, code_name, point)
		VALUES (#{id}, 'P100', 10)
	</insert>

	<update id="updateTotalPoints" parameterType="String">
		UPDATE member
		SET
		point = (SELECT SUM(point) FROM member_point WHERE id = #{id})
		WHERE id
		= #{id}
	</update>

	<select id="list" resultType="com.erunjrun.mypage.dto.MypageDTO">
		SELECT
		member_point.create_date,
		member_point.code_name,
		member_point.point
		FROM
		member_point
		WHERE
		member_point.id = #{id}
		ORDER BY member_point.create_date DESC
		LIMIT
		#{limit} OFFSET #{offset}
	</select>

	<select id="count" resultType="int">
		SELECT CEIL(COUNT(*) / #{cnt})
		AS
		pages
		FROM member_point
		WHERE member_point.id = #{id}
	</select>

	<select id="getFriendRequests" resultType="map">
		SELECT id, unlike_id,
		create_date
		FROM mate_application
		WHERE id= #{id}
		ORDER BY create_date
		DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>

	<select id="countFriendRequests" resultType="int">
		SELECT CEIL(COUNT(*)
		/ #{cnt})
		AS
		pages
		FROM mate_application
		WHERE id = #{id}
	</select>

	<select id="getProfileData" parameterType="String"
		resultType="map">
		SELECT * FROM profile WHERE id = #{toUserId}
	</select>

	<insert id="acceptFriendRequest" parameterType="map">
		INSERT INTO mate
		(id, unlike_id, mate_date)
		VALUES (#{id}, #{unlikeId}, NOW());
	</insert>

	<delete id="deleteFriendRequest" parameterType="map">
		DELETE FROM
		mate_application
		WHERE id = #{id} AND unlike_id = #{unlikeId};
	</delete>

	<delete id="rejectFriendRequest" parameterType="map">
		DELETE FROM
		mate_application
		WHERE id = #{id} AND unlike_id = #{unlikeId};
	</delete>

	<insert id="insertMateHistory" parameterType="map">
		INSERT INTO
		mate_history (id, code_name, unlike_id, create_date)
		VALUES (#{id},
		#{code_name}, #{unlikeId}, NOW());
	</insert>
	
	
	
	<insert id="cancel" parameterType="map">
		insert into mate_history(id,code_name,unlike_id)
								values(#{unlikeId},'M104',#{id})
	</insert>
	
	
	<select id="getAppliedMates" resultType="map">
		SELECT id, create_date
		FROM mate_application
		WHERE unlike_id = #{id}
		ORDER BY create_date DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>

	<delete id="cancelMateApplication" parameterType="map">
		DELETE FROM
		mate_application
		WHERE id = #{unlikeId} AND unlike_id = #{id};
	</delete>

	<select id="myIconList" resultType="map">
		SELECT
		ib.icon_idx,
		ib.buy_date,
		ib.buy_idx,
		i.icon_name,
		i.image
		FROM
		icon_buy ib
		JOIN
		icon i ON
		ib.icon_idx = i.icon_idx
		WHERE
		ib.id = #{id}
		ORDER BY
		ib.buy_date DESC
		LIMIT
		#{limit}
		OFFSET
		#{offset}
	</select>

	<select id="countMyIconList" resultType="int">
		SELECT CEIL(COUNT(*)
		/#{cnt})
		AS
		pages FROM
		icon_buy
		WHERE id = #{id}
	</select>

	<update id="iconImageUpdate" parameterType="map">
		UPDATE member
		SET
		icon_image = (
		SELECT image
		FROM icon
		WHERE icon.icon_idx = #{iconId}
		)
		WHERE id = #{id};
	</update>

	<update id="iconImageUpdateToDefault" parameterType="map">
		UPDATE member
		SET icon_image = NULL
		WHERE id = #{id};
	</update>

	<select id="myMateList" resultType="map">
		SELECT id, unlike_id,
		mate_date
		FROM mate
		WHERE id = #{id} OR unlike_id = #{id}
		ORDER BY
		mate_date DESC
		LIMIT
		#{limit}
		OFFSET #{offset}
	</select>

	<select id="countFriends" resultType="int">
		SELECT CEIL(COUNT(*)
		/#{cnt})
		AS
		pages FROM
		mate
		WHERE id = #{id}
	</select>

	<select id="myBoardList" resultType="map">
		SELECT board_idx, id,
		subject, create_date, code_name
		FROM board
		WHERE id = #{id}
		ORDER BY
		create_date
		DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>

	<select id="countBoard" resultType="int">
		SELECT CEIL(COUNT(*) /
		#{cnt})
		AS
		pages
		FROM board
		WHERE id = #{id}
	</select>

	<select id="myCommentList" resultType="map">
		SELECT c.comment_idx,
		c.board_idx,
		c.content,
		c.create_date,
		c.nickname,
		c.code_name,
		b.id
		FROM
		comment c
		JOIN board b ON c.board_idx = b.board_idx
		WHERE b.id = #{id}
		AND c.code_name IN ('B100', 'B101')
		ORDER BY c.create_date DESC
		LIMIT
		#{limit} OFFSET #{offset}
	</select>

	<select id="countComment" resultType="int">
		SELECT CEIL(COUNT(*) /
		#{cnt}) AS pages
		FROM comment c
		JOIN board b ON c.board_idx =
		b.board_idx
		WHERE b.id = #{id}
		AND c.code_name IN ('B100', 'B101')
	</select>

	<select id="likedBoardList" resultType="map">
		SELECT l.board_idx, l.id,
		l.code_name,
		b.create_date, b.subject
		FROM likes l
		JOIN board b ON
		l.board_idx =
		b.board_idx
		WHERE l.id = #{id}
		ORDER BY l.board_idx DESC
		LIMIT #{limit}
		OFFSET #{offset}
	</select>

	<select id="countLike" resultType="int">
		SELECT CEIL(COUNT(*) /
		#{cnt})
		AS
		pages
		FROM likes
		WHERE id = #{id}
	</select>

	<select id="messageList" resultType="map">
		SELECT DISTINCT cl.chat_idx,
		CASE
		WHEN cl.id = u1.id THEN u2.id
		ELSE u1.id
		END AS other_id,
		c.create_date,
		cl.use_yn
		FROM chat_link cl
		JOIN chat c ON cl.chat_idx =
		c.chat_idx
		JOIN chat_link u1 ON u1.chat_idx = cl.chat_idx
		JOIN chat_link
		u2 ON u2.chat_idx = cl.chat_idx
		WHERE cl.id = #{id}
		AND u1.id != #{id}
		AND cl.use_yn = 'N'
		ORDER BY c.create_date DESC
		LIMIT #{limit} OFFSET
		#{offset}
	</select>

	<select id="countMessage" resultType="int">
		SELECT CEIL(COUNT(*) /
		#{cnt}) AS pages
		FROM chat_link
		WHERE id = #{id}
		AND use_yn = 'N'
	</select>

	<select id="crewMasterMessageList" resultType="map">
		SELECT
		ccl.chat_idx,
		CASE
		WHEN ccl.id = u1.id THEN u2.id
		ELSE u1.id
		END AS
		other_id,
		MAX(ccc.create_date) AS message_date,
		cc.crew_idx,
		ccl.use_yn
		FROM
		crew_chat_link ccl
		JOIN crew_chat cc ON ccl.chat_idx = cc.chat_idx
		JOIN crew_chat_content ccc ON ccl.chat_idx = ccc.chat_idx
		JOIN
		crew_chat_link u1 ON u1.chat_idx = cc.chat_idx
		JOIN crew_chat_link u2
		ON u2.chat_idx = cc.chat_idx AND u2.id != ccl.id
		WHERE ccl.id = #{id}
		AND cc.code_cp = 'p'
		AND ccl.use_yn = 'N'
		GROUP BY
		ccl.chat_idx,
		other_id, cc.crew_idx
		ORDER BY message_date DESC
		LIMIT #{limit} OFFSET
		#{offset}
	</select>

	<select id="countCrewMessage" resultType="int">
		SELECT CEIL(COUNT(*) /
		#{cnt}) AS pages
		FROM crew_chat_link
		WHERE id = #{id}
		AND use_yn = 'N'
	</select>

	<select id="memberCrewList" resultType="map">
		SELECT
		c.crew_name,
		c.member,
		c.current_member,
		c.days,
		c.address,
		c.crew_idx
		FROM
		crew_member
		cm
		JOIN
		crew c ON cm.crew_idx =
		c.crew_idx
		WHERE
		cm.id = #{id}
		ORDER BY
		cm.create_date DESC
		LIMIT #{limit}
		OFFSET #{offset}
	</select>

	<select id="countMemberCrewList" resultType="int">
		SELECT CEIL(COUNT(*)
		/ #{cnt})
		AS
		pages
		FROM crew_member
		WHERE crew_member.id = #{id}
	</select>

	<select id="requestedCrewList" resultType="map">
		SELECT
		ca.application_idx,
		c.crew_name,
		c.member,
		c.current_member,
		c.days,
		c.address,
		c.crew_idx
		FROM
		crew_application ca
		JOIN
		crew c ON ca.crew_idx =
		c.crew_idx
		WHERE
		ca.id = #{id}
		ORDER BY
		ca.create_date DESC
		LIMIT #{limit}
		OFFSET #{offset}
	</select>

	<select id="countRequestedCrewList" resultType="int">
		SELECT
		CEIL(COUNT(*) / #{cnt})
		AS
		pages
		FROM crew_application
		WHERE
		crew_application.id = #{id}
	</select>

	<select id="likedCrewList" resultType="map">
		SELECT
		c.crew_name,
		c.member,
		c.current_member,
		c.days,
		c.address,
		cl.crew_idx
		FROM
		crew_like cl
		JOIN
		crew c ON cl.crew_idx = c.crew_idx
		WHERE
		cl.id = #{id}
		ORDER BY
		c.create_date DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>

	<select id="countLikedCrewList" resultType="int">
		SELECT CEIL(COUNT(*)
		/ #{cnt})
		AS
		pages
		FROM crew_like
		WHERE crew_like.id = #{id}
	</select>

	<select id="likedMemberList" resultType="map">
		SELECT
		im.id,
		im.request_date,
		im.unlike_id,
		m.nickname,
		m.address,
		m.birth,
		m.gender
		FROM
		interest_member im
		JOIN
		member m ON im.unlike_id = m.id
		WHERE
		im.id =
		#{id}
		ORDER BY
		request_date DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>

	<select id="countLikedMemberList" resultType="int">
		SELECT
		CEIL(COUNT(*) / #{cnt}) AS pages
		FROM interest_member
		WHERE
		interest_member.id = #{id}
	</select>

	<select id="blockMemberList" resultType="map">
		SELECT
		bm.id,
		bm.block_date,
		bm.unlike_id,
		m.nickname,
		m.address,
		m.birth,
		m.gender
		FROM
		block_member bm
		JOIN
		member m ON bm.id = m.id
		WHERE
		bm.unlike_id = #{id}
		ORDER BY
		block_date
		DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>

	<select id="countBlockMemberList" resultType="int">
		SELECT
		CEIL(COUNT(*) / #{cnt}) AS pages
		FROM block_member
		WHERE
		block_member.unlike_id = #{id}
	</select>

</mapper>   	